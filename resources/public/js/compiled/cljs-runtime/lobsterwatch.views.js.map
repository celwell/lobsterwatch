{"version":3,"sources":["lobsterwatch/views.cljs"],"mappings":";;;;;;;AAOA,AAAA,AAAMA;AAAN,AACE,AAAMC,AAAS,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACVC,AAAO,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AADd,AAEE;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMG,AACiB,AAAA,AAAA,AAAAC,AAASH,AACR,AAAA,AAAA,AAAAG,AAAUH,AAC3BI,AACH,AAACC,AACA,AAAAC,AAAA;AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAm5E0C,AAAAkC,AAAAvC;AAn5E1CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAAA,AAA4BkB;AAA5B,AAAAb,AAAAL,AAAA,AAAce;AAAd,AAAAV,AAAAL,AAAA,AAAgBgB;AAAhB,AAAAX,AAAAL,AAAA,AAAkBiB;AAAlB,AAAA,AAAA,AAAAX,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACSoB,AACHE,AAAc,AAAA,AAAK,AAAA,AAAGJ,AACR,AAAA,AAAK,AAAA,AAAGC;;AAH5B,AAAA,AAAAjB,AAAA;;;;AAAA;;;;;AAAA,AAAAQ,AAAA,AAAAC,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAArB;;AAAA,AAAAkB,AAAA,AAAAC,AAAAX,AAAA;;;AAAA,AAAAc,AAAA,AAAAC,AAAAvB;AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AAA4BO;AAA5B,AAAAb,AAAAM,AAAA,AAAcI;AAAd,AAAAV,AAAAM,AAAA,AAAgBK;AAAhB,AAAAX,AAAAM,AAAA,AAAkBM;AAAlB,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAK,AAAAzB,AACS4B,AACHE,AAAc,AAAA,AAAK,AAAA,AAAGJ,AACR,AAAA,AAAK,AAAA,AAAGC;;;AAH5B;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAA5B,AAAA,AAAAH,AAAsCN;;;;;AAW/C,AAAA,AAAMyC;AAAN,AAEE,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAACC,AAAyBH;;AAE5B,AAAKI,AACH,AAAA,AAAA,AAACC,AAAU/C,AAER,AAAKgD;AAAL,AACE,AAACH,AAAyBH;;AAEjC,AAAA,AAAMO;AAAN,AACE;AAAA,AAAA,AAAA,AAAA,AAEIH","names":["lobsterwatch.views/canvas*","lobsters","G__52199","re-frame.core/subscribe","window","G__52200","js/module$node_modules$react_konva$lib$ReactKonva.Stage","cljs.core/deref","js/module$node_modules$react_konva$lib$ReactKonva.Layer","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__52202","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__52204","cljs.core/chunk-buffer","i__52203","map__52205","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52201","cljs.core/chunk-rest","map__52207","cljs.core/first","cljs.core/cons","cljs.core/rest","x","y","name","lobster","js/module$node_modules$react_konva$lib$ReactKonva.Circle","lobsterwatch.views/anim-loop","G__52209","re-frame.core/dispatch","js/requestAnimationFrame","lobsterwatch.views/canvas","cljs.core/with-meta","_this","lobsterwatch.views/main-panel","cljs.core/chunk-first"],"sourcesContent":["(ns lobsterwatch.views\n  (:require [re-frame.core :as rf]\n            [lobsterwatch.util :as util]\n            [lobsterwatch.subs :as subs]\n            [lobsterwatch.events :as events]\n            [\"react-konva\" :as rk]))\n\n(defn canvas* []\n  (let [lobsters (rf/subscribe [::subs/lobsters])\n        window (rf/subscribe [::subs/window])]\n    (fn []\n      [:> rk/Stage {:class \"stage\"\n                    :width (:width @window)\n                    :height (:height @window)}\n       [:> rk/Layer\n        (doall\n         (for [{:keys [x y name] :as lobster} @lobsters]\n           ^{:key name}\n           [:> rk/Circle {:x (int (- x 10))\n                          :y (int (- y 10))\n                          :radius 10\n                          :fill \"rgba(200,0,0,1)\"\n                          ;; :stroke \"black\"\n                          ;; :strokeWidth 1\n                          }]))\n        ]])))\n\n(defn anim-loop\n  []\n  (rf/dispatch [::events/anim-step])\n  (js/requestAnimationFrame anim-loop))\n\n(def canvas\n  (with-meta canvas*\n    {:component-did-mount\n     (fn [_this]\n       (js/requestAnimationFrame anim-loop))}))\n\n(defn main-panel []\n  (fn []\n    [:div\n     [canvas]]))\n"]}