{"version":3,"sources":["lobsterwatch/events.cljs"],"mappings":";;;;;;AAMA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AACEC;;AAEH,AAAA,AAACC,AAEA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAA,AAAA,AACWA,AACA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAAcC,AACzC,AAAA,AAAA,AAAA,AAACD,AAA2B,AAAeC;;AAEvD,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAAA,AAC0BM;AAD1B,AAAAX,AAAAK,AAAA,AACWE;AADX,AAAAP,AAAAK,AAAA,AACaG;AADb,AAAAR,AAAAK,AAAA,AACeI;AADf,AAAAT,AAAAK,AAAA,AACkBK;AADlB,AAEMC,AACA,AAAA,AAACC,AAAUC,AAAEJ,AACb,AAAA,AAACG,AAAUC,AAAEH;;AAEnB,AAAA,AAACnB,AAEA,AAAKU;AAAL,AACE,AAAA,AAAA,AAAA,AAAAa,AAACC,AAAUd;AAAX,AAA2B,AAAAa,AAACE,AAAIV","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","lobsterwatch.db/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__52174","map__52175","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","db","cljs.core/assoc-in","js/window","p__52177","map__52178","lobsterwatch.events/velocity","x","y","vx","vy","lobster","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/+","p1__52180#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns lobsterwatch.events\n  (:require [re-frame.core :as rf]\n            [lobsterwatch.util :as util]\n            [lobsterwatch.db :as db]\n            [clojure.string :as s]))\n\n(rf/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(rf/reg-event-fx\n ::window-resized\n (fn [{:keys [db]}]\n   {:db (-> db\n            (assoc-in [:window :width] (.-innerWidth js/window))\n            (assoc-in [:window :height] (.-innerHeight js/window)))}))\n\n(defn velocity\n  [{:keys [x y vx vy] :as lobster}]\n  (-> lobster\n      (update :x + vx)\n      (update :y + vy)))\n\n(rf/reg-event-db\n ::anim-step\n (fn [db]\n   (update-in db [:lobsters] #(map velocity %))))\n"]}